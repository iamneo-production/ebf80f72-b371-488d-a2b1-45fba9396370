-- 1. Display all unique products in ascending order
CREATE OR REPLACE PROCEDURE UNIQ_PRODUCTS
AS
BEGIN
FOR i IN(SELECT DISTINCT(PRODUCTNAME)
FROM BUSINESS_SALES_TRANSACTION
ORDER BY PRODUCTNAME) LOOP
DBMS_OUTPUT.PUT_LINE(i.PRODUCTNAME);
END LOOP;
END;

BEGIN
UNIQ_PRODUCTS();
END;

--2. Find how many products were sold in the year 2018
CREATE OR REPLACE PROCEDURE PRODUCTS_SOLD_2018
AS
BEGIN
FOR i IN(SELECT SUM(QUANTITY) TotalProductsSold
FROM BUSINESS_SALES_TRANSACTION
WHERE TRANSACTIONDATE LIKE '%18') LOOP
DBMS_OUTPUT.PUT_LINE(i.TotalProductsSold);
END LOOP;
END;

BEGIN
PRODUCTS_SOLD_2018();
END;

--3.Find the total sale amount in the year 2018
CREATE OR REPLACE PROCEDURE TOTAL_SALE_AMOUNT
AS
BEGIN
FOR i IN(SELECT SUM(QUANTITY*PRICE) SaleAmount
FROM BUSINESS_SALES_TRANSACTION
WHERE TRANSACTIONDATE LIKE '%18') LOOP
DBMS_OUTPUT.PUT_LINE(i.SaleAmount);
END LOOP;
END;

BEGIN
TOTAL_SALE_AMOUNT();
END;

--4. Find the total sale amount in each month of the year 2018?
CREATE OR REPLACE PROCEDURE SALE_AMOUNT_EACH_MONTH
AS
BEGIN
FOR i IN(SELECT SUM(QUANTITY*PRICE) SaleAmount,
to_char(to_date(extract(month from TRANSACTIONDATE),'MM'),'MONTH') as Month
FROM BUSINESS_SALES_TRANSACTION
where extract (year from TRANSACTIONDATE) = '2018'
group by extract(month from TRANSACTIONDATE)) LOOP
DBMS_OUTPUT.PUT_LINE(i.SaleAmount||'      '||i.Month);
END LOOP;
END;

BEGIN
SALE_AMOUNT_EACH_MONTH();
END;

--5. Find which product is maximum purchased
CREATE OR REPLACE PROCEDURE MAX_PURCHASED_PRODUCT
AS
BEGIN
FOR i IN(SELECT PRODUCTNAME
FROM BUSINESS_SALES_TRANSACTION
WHERE QUANTITY=(SELECT MAX(QUANTITY) FROM BUSINESS_SALES_TRANSACTION)) LOOP
DBMS_OUTPUT.PUT_LINE(i.PRODUCTNAME);
END LOOP;
END;

BEGIN
MAX_PURCHASED_PRODUCT();
END;
